"use client"

import React, { useState, useEffect } from "react"

import { useMediaQuery } from "@react-hook/media-query"
import { Button } from "@/components/ui/button"
import {
    Command,
    CommandEmpty,
    CommandGroup,
    CommandInput,
    CommandItem,
    CommandList,
} from "@/components/ui/command"
import {
    Drawer,
    DrawerContent,
    DrawerTrigger,
} from "@/components/ui/drawer"
import {
    Popover,
    PopoverContent,
    PopoverTrigger,
} from "@/components/ui/popover"
import { getMeals, getStudents } from "@/lib/api"
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from "./ui/select"
import { Input } from "./ui/input"
import { CardTitle } from "./ui/card"
import { Form, FormField, FormItem, FormControl, FormMessage } from "./ui/form"
import { Textarea } from "./ui/textarea"
import { zodResolver } from "@hookform/resolvers/zod"
import { useForm } from "react-hook-form"
import { z } from "zod"
import jsPDF from 'jspdf'
import autoTable from 'jspdf-autotable'
import { sendReport } from "@/lib/api"
import { toast } from 'sonner';
import { supabase } from "@/lib/supabaseClient"


type Student = {
    id: string | undefined;
    name: string | undefined;
}

type Meal = {
    pequeno_almoco: string | undefined;
    extrasPequenoAlmoco: string | undefined;
    almoco1: string | undefined;
    almoco2: string | undefined;
    extrasAlmoco: string | undefined;
    sobremesa: string | undefined; 
    lanche: string | undefined;
}

interface IGetStudents {
    permLevel: string
}
interface IReport {
  id: string | undefined;
  name: string;
  email: string;
  parent?: string;
}

const FormSchema = z.object({
  name: z.string().optional(),
  email: z.string().email(),
  behavior: z.string().min(3),
  pequenoAlmoco: z.string().optional(),
  almoco1: z.string().optional(),
  almoco2: z.string().optional(),
  sobremesa: z.string().optional(),
  lanche: z.string().optional(),
  porcaoPequenoAlmoco: z.string().optional(),
  porcaoAlmoco1: z.string().optional(),
  porcaoAlmoco2: z.string().optional(),
  porcaoSobremesa: z.string().optional(),
  porcaoLanche: z.string().optional(),
  fezes: z.string().min(2),
  vomitos: z.string().min(2),
  febres: z.string().min(2),
  msg: z.string().optional(),
})

export default function GetStudent(props: IGetStudents) {
    
    const [open, setOpen] = useState(false)
    const [loading, setLoading] = useState(false)
    const [isSendingEmail, setSending] = useState(false)
    const [students, setStudents] = useState<Student[]>([])
    // const [meals, setMeals] = useState<Meal[]>([])
    const isDesktop = useMediaQuery("(min-width: 768px)")
    const [selectedStudent, setSelectedStudent] = useState<Student | null>(
        null
    )
    const [lastMeal, setLastMeal] = useState<Meal | null>(null);

    const [isSubmitting, setSubmitting] = useState(false)

  // Declarando múltiplos estados como propriedades de um objeto
  const [state, setState] = useState({
    // name: selectedStudent?.name || "",
    // email: "",
    behavior: "",
    // pequenoAlmoco: lastMeal?.pequeno_almoco || "",
    // almoco1: lastMeal?.almoco1 || "",
    // almoco2: lastMeal?.almoco2 || "",
    // sobremesa: lastMeal?.sobremesa || "",
    // lanche: lastMeal?.lanche || "",
    porcaoPequenoAlmoco: "",
    porcaoAlmoco1: "",
    porcaoAlmoco2: "",
    porcaoSobremesa: "",
    porcaoLanche: "",
    fezes: "",
    vomitos: "",
    febres: "",
    msg: "" 
  })
  

  useEffect(() => {
    const getData = async () => {
        setLoading(true);
        try {
            const response = await getStudents();
            const { data } = await response?.json();
            setStudents(data);
        } catch (error) {
            console.error('Error fetching data:', error);
        } finally {
            setLoading(false);
        }
    };

    const fetchLastMeal = async () => {
        const { data, error } = await supabase
          .from('meals')
          .select('*')
          .order('created_at', { ascending: false })
          .limit(1)
          .single();
  
        if (error) {
          console.error('Erro ao buscar última refeição:', error);
        } else {
          setLastMeal(data);
        }
      };
  
      fetchLastMeal();
    getData();
}, []);


  const loadHandler = (state: boolean) => {
    setLoading(!state)
  }

  const sendingHandler = (state: boolean) => {
    setSending(!state)
    setTimeout(() => {
      toast('Sucesso', {
        description: 'O e-mail foi enviado.',
        duration: 5000,
        cancel: {
          label: 'Fechar',
          onClick: () => console.log('Cancel!'),
        },
      })
      setSending(state)
    }, 2000);
  }

 // Modificando um dos estados
 const updateField = (field: any, value: any) => {
  setState((prevState) => ({
    ...prevState,
    [field]: value,
  }));
};

  // 1. Define your form.
  const form = useForm<z.infer<typeof FormSchema>>({
    resolver: zodResolver(FormSchema),
    defaultValues: {
      name: selectedStudent?.name,
      // name: "",
      email: "",
      behavior: "",
      pequenoAlmoco: "",
      almoco1: "",
      almoco2: "",
      sobremesa: "",
      lanche: "",
      porcaoPequenoAlmoco: "",
      porcaoAlmoco1: "",
      porcaoAlmoco2: "",
      porcaoSobremesa: "",
      porcaoLanche: "",
      fezes: "",
      vomitos: "",
      febres: "",
      msg: ""
    }
  })

  const downloadPDF = () => {

    loadHandler(loading);

    const doc = new jsPDF('l');
    const date = new Date();
    const createdAt = new Intl.DateTimeFormat('pt-BR').format(date);
    
    doc.setFontSize(10);
    doc.text('O Fraldario', 14, 25);
    doc.text(`Data: ${createdAt}`, 190, 25, {align: 'right'});
    doc.text(`Nome da criança: ${selectedStudent?.name}`, 14, 30);
    doc.text(`Comportamento: ${state.behavior}`, 190, 30, {align: 'right'});

    doc.text(`Refeição/Porção`, 14, 40);

    // Generate the table
    autoTable(doc, {
      head: [["Pequeno-almoço", "Almoço: 1º", "Almoço: 2º", "Sobremesa", "Lanche"]],
      theme: 'striped',
      styles: {
        fontSize: 10
      },
      margin: { top: 43 },
      body: [
        [`${lastMeal?.pequeno_almoco}`, `${lastMeal?.almoco1}`, `${lastMeal?.almoco2}`, `${lastMeal?.sobremesa}`, `${lastMeal?.lanche}`],
        [`${state.porcaoPequenoAlmoco}`, `${state.porcaoAlmoco1}`, `${state.porcaoAlmoco2}`, `${state.porcaoSobremesa}`, `${state.porcaoLanche}`],
      ],
    })
    
    doc.text(`Fezes: ${state.fezes}             Vômitos: ${state.vomitos}             Febres: ${state.febres}`, 14, 75);
    doc.text(`Outras ocorrências: ${state.msg}`, 14, 85);

    setTimeout(() => {
      loadHandler(!loading);
      // Save the PDF
      doc.save(`Relatorio-${createdAt}-${selectedStudent?.name}.pdf`);
      toast('Sucesso', {
        description: 'O ficheiro foi descarregado.',
        duration: 5000,
        cancel: {
          label: 'Fechar',
          onClick: () => console.log('Closed!'),
        },
      })
    }, 2000);
  }

    if (isDesktop) {
                return (
                    <React.Fragment>
                        <Popover open={open} onOpenChange={setOpen}>
                        <PopoverTrigger asChild>
                            <Button variant="secondary" className="w-full justify-start text-[13px]">
                                {selectedStudent ? 
                                    <div className="flex items-center gap-2"><i className="ri-search-line"></i>{selectedStudent.name}</div>
                                    : <div className="flex items-center gap-2"><i className="ri-search-line"></i>Pesquisar</div>}
                            </Button>
                        </PopoverTrigger>
                        <PopoverContent className="w-[200px] p-0" align="start">
                            <StudentsList setOpen={setOpen} setSelectedStudent={setSelectedStudent} />
                        </PopoverContent>
                    </Popover>
                    {selectedStudent ? 
                        <StudentData></StudentData>
                    :   ''
                    }
                    </React.Fragment>
                )
            }
        
            return (
                <React.Fragment>
                    <Drawer open={open} onOpenChange={setOpen}>
                    <DrawerTrigger asChild>
                    <Button variant="secondary" className="w-full justify-start text-[13px]">
                                {selectedStudent ? 
                                    <div className="flex items-center gap-2"><i className="ri-search-line"></i>{selectedStudent.name}</div>
                                    : <div className="flex items-center gap-2"><i className="ri-search-line"></i>Pesquisar</div>}
                            </Button>
                    </DrawerTrigger>
                    <DrawerContent>
                        <div className="mt-4 border-t">
                            <StudentsList setOpen={setOpen} setSelectedStudent={setSelectedStudent} />
                        </div>
                    </DrawerContent>
                </Drawer>
                {selectedStudent ? 
                    ''
                    // <StudentData id={selectedStudent?.id} name={selectedStudent?.name} parent={selectedStudent?.parent} email={selectedStudent?.email} />
                    : ''}
                </React.Fragment>
            )

            function StudentsList({
                setOpen,
                setSelectedStudent,
            }: {
                setOpen: (open: boolean) => void
                setSelectedStudent: (student: Student | null) => void
            }) {
                return (
                    <Command className="w-full">
                        <CommandInput
                        className="w-full"
                         placeholder="Digite o nome" />
                        <CommandList>
                            <CommandEmpty>No results found.</CommandEmpty>
                            <CommandGroup>
                                {students.map((student) => (
                                    <CommandItem
                                        key={student.id}
                                        value={student.name}
                                        onSelect={(value) => {
                                            setSelectedStudent(
                                                students.find((priority) => priority.id === student.id) || null
                                            )
                                            setOpen(false)
                                        }}
                                    >
                                        {student.name}
                                    </CommandItem>
                                ))}
                            </CommandGroup>
                        </CommandList>
                    </Command>
                )
    }

            function StudentData({ className }: React.ComponentProps<"form">) {

                // 2. Define a submit handler.
                async function onSubmit(values: z.infer<typeof FormSchema>) {

                  try {
                    console.log(values)
                    // sendingHandler(isSendingEmail);
                    // await sendReport(values);
                  } catch (error) {
                    console.log(error)
                  }
                }
                
                return (
                        <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="h-auto">
            <div className="grid gap-7 grid-cols-4 mt-5">
                <div className="col-span-3">
                <div className="flex flex-col gap-3">
              <div className="flex gap-4">
                <FormField
                  control={form.control}
                  name="name"
                  render={({ field }) => (
                    <FormItem className="w-full">
                    <CardTitle className="text-left text-[13px]">Nome da criança</CardTitle>
                      <FormControl>
                        <Input placeholder={selectedStudent?.name} {...field}
                        className="disabled:placeholder:text-[#000000] text-[13px]" />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )} />
                <FormField
                  control={form.control}
                  name="behavior"
                  render={({ field }) => (
                    <FormItem className="min-w-[140px]">
                      <CardTitle className="text-left text-[13px]">Comportamento</CardTitle>
                      <Select
                       defaultValue={field.value}
                       onValueChange={(e) => {
                        field.onChange(e);  // Chama o onChange original do field
                        updateField('behavior', e);  // Chama a função que actualiza o estado
                      }} required>
                      <FormControl>
                        <SelectTrigger className="w-full text-[13px]">
                          <SelectValue placeholder="" {...field} />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem className="text-[13px]" value="Bom">Bom</SelectItem>
                        <SelectItem className="text-[13px]" value="Mau">Mau</SelectItem>
                      </SelectContent>
                    </Select>
                      <FormMessage />
                    </FormItem>
                  )} />
              </div>
  
              <CardTitle className="text-left text-[13px]">Refeição/Porção</CardTitle>
              <div className="flex justify-between gap-4">
                <FormField
                  control={form.control}
                  name="pequenoAlmoco"
                  render={({ field }) => (
                    <FormItem className="w-full">
                      <FormControl>
                      <Input
                      placeholder={lastMeal?.pequeno_almoco || ''}
                      disabled {...field}
                        className="disabled:placeholder:text-[#000000] text-[13px]" />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )} />
                <FormField
                  control={form.control}
                  name="porcaoPequenoAlmoco"
                  render={({ field }) => (
                    <FormItem className="min-w-[140px]">
                      {/* <FormLabel className="text-muted-foreground text-[13px]">Porção</FormLabel> */}
                      <Select
                       defaultValue={state.porcaoPequenoAlmoco}
                       onValueChange={(e) => {
                        field.onChange(e);  // Chama o onChange original do field
                        updateField('porcaoPequenoAlmoco', e);  // Chama a função que actualiza o estado
                      }} >
                      <FormControl>
                        <SelectTrigger className="w-full text-[13px]">
                          <SelectValue placeholder="..." className="text-[13px]" {...field} />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem className="text-[13px]" value="2 Porções">2 Porções</SelectItem>
                        <SelectItem className="text-[13px]" value="1 Porção">1 Porção</SelectItem>
                        <SelectItem className="text-[13px]" value="1/2 Porção">1/2 Porção</SelectItem>
                        <SelectItem className="text-[13px]" value="1/4 Porção">1/4 Porção</SelectItem>
                        <SelectItem className="text-[13px]" value="Não comeu">Não comeu</SelectItem>
                      </SelectContent>
                    </Select>
                      <FormMessage />
                    </FormItem>
                  )} />
              </div>
  
              <div className="flex justify-between gap-4">
                <FormField
                  control={form.control}
                  name="almoco1"
                  render={({ field }) => (
                    <FormItem className="w-full">
                      {/* <FormLabel className="text-muted-foreground text-[13px]">Almoço: 1º</FormLabel> */}
                      <FormControl>
                        <Input placeholder={lastMeal?.almoco1 || ''} 
                        className="disabled:placeholder:text-[#000000] text-[13px]" {...field} disabled />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )} />
                  <FormField
                  control={form.control}
                  name="porcaoAlmoco1"
                  render={({ field }) => (
                    <FormItem className="min-w-[140px]">
                      {/* <FormLabel className="text-muted-foreground text-[13px]">Porção</FormLabel> */}
                      <Select
                       defaultValue={state.porcaoAlmoco1}
                       onValueChange={(e) => {
                        field.onChange(e);  // Chama o onChange original do field
                        updateField('porcaoAlmoco1', e);  // Chama a função que actualiza o estado
                      }} >
                      <FormControl>
                        <SelectTrigger className="w-full text-[13px]">
                          <SelectValue placeholder="..." className="text-[13px]" {...field} />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem className="text-[13px]" value="2 Porções">2 Porções</SelectItem>
                        <SelectItem className="text-[13px]" value="1 Porção">1 Porção</SelectItem>
                        <SelectItem className="text-[13px]" value="1/2 Porção">1/2 Porção</SelectItem>
                        <SelectItem className="text-[13px]" value="1/4 Porção">1/4 Porção</SelectItem>
                        <SelectItem className="text-[13px]" value="Não comeu">Não comeu</SelectItem>
                      </SelectContent>
                    </Select>
                      <FormMessage />
                    </FormItem>
                  )} />
              </div>
  
              
              <div className="flex justify-between gap-4">
                <FormField
                  control={form.control}
                  name="almoco2"
                  render={({ field }) => (
                    <FormItem className="w-full">
                      {/* <FormLabel className="text-muted-foreground text-[13px]">Almoço: 2º</FormLabel> */}
                      <FormControl>
                        <Input placeholder={lastMeal?.almoco2 || ''} 
                        className="disabled:placeholder:text-[#000000] text-[13px]" {...field} disabled />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )} />
                  <FormField
                  control={form.control}
                  name="porcaoAlmoco2"
                  render={({ field }) => (
                    <FormItem className="min-w-[140px]">
                      {/* <FormLabel className="text-muted-foreground text-[13px]">Porção</FormLabel> */}
                      <Select
                       defaultValue={state.porcaoAlmoco2}
                       onValueChange={(e) => {
                        field.onChange(e);  // Chama o onChange original do field
                        updateField('porcaoAlmoco2', e);  // Chama a função que actualiza o estado
                      }} >
                      <FormControl>
                        <SelectTrigger className="w-full text-[13px]">
                          <SelectValue placeholder="..." className="text-[13px]" {...field} />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem className="text-[13px]" value="2 Porções">2 Porções</SelectItem>
                        <SelectItem className="text-[13px]" value="1 Porção">1 Porção</SelectItem>
                        <SelectItem className="text-[13px]" value="1/2 Porção">1/2 Porção</SelectItem>
                        <SelectItem className="text-[13px]" value="1/4 Porção">1/4 Porção</SelectItem>
                        <SelectItem className="text-[13px]" value="Não comeu">Não comeu</SelectItem>
                      </SelectContent>
                    </Select>
                      <FormMessage />
                    </FormItem>
                  )} />
              </div>
  
              
              <div className="flex justify-between gap-4">
              <FormField
                  control={form.control}
                  name="sobremesa"
                  render={({ field }) => (
                    <FormItem className="w-full">
                      {/* <FormLabel className="text-muted-foreground text-[13px]">Sobremesa</FormLabel> */}
                      <FormControl>
                        <Input placeholder={lastMeal?.sobremesa || ''}
                        className="disabled:placeholder:text-[#000000] text-[13px]" {...field} disabled />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )} />
                  <FormField
                  control={form.control}
                  name="porcaoSobremesa"
                  render={({ field }) => (
                    <FormItem className="min-w-[140px]">
                      {/* <FormLabel className="text-muted-foreground text-[13px]">Porção</FormLabel> */}
                      <Select
                       defaultValue={state.porcaoSobremesa}
                       onValueChange={(e) => {
                        field.onChange(e);  // Chama o onChange original do field
                        updateField('porcaoSobremesa', e);  // Chama a função que actualiza o estado
                      }} >
                      <FormControl>
                        <SelectTrigger className="w-full text-[13px]">
                          <SelectValue placeholder="..." className="text-[13px]" {...field} />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem className="text-[13px]" value="2 Porções">2 Porções</SelectItem>
                        <SelectItem className="text-[13px]" value="1 Porção">1 Porção</SelectItem>
                        <SelectItem className="text-[13px]" value="1/2 Porção">1/2 Porção</SelectItem>
                        <SelectItem className="text-[13px]" value="1/4 Porção">1/4 Porção</SelectItem>
                        <SelectItem className="text-[13px]" value="Não comeu">Não comeu</SelectItem>
                      </SelectContent>
                    </Select>
                      <FormMessage />
                    </FormItem>
                  )} />
              </div>
  
              <div className="flex justify-between gap-4">
                <FormField
                  control={form.control}
                  name="lanche"
                  render={({ field }) => (
                    <FormItem className="w-full">
                      {/* <FormLabel className="text-muted-foreground text-[13px]">Lanche</FormLabel> */}
                      <FormControl>
                        <Input placeholder={lastMeal?.lanche || ''} 
                        className="disabled:placeholder:text-[#000000] text-[13px]" {...field} disabled />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )} />
                  <FormField
                  control={form.control}
                  name="porcaoLanche"
                  render={({ field }) => (
                    <FormItem className="min-w-[140px]">
                      {/* <FormLabel className="text-muted-foreground text-[13px]">Porção</FormLabel> */}
                      <Select
                       defaultValue={state.porcaoLanche}
                       onValueChange={(e) => {
                        field.onChange(e);  // Chama o onChange original do field
                        updateField('porcaoLanche', e);  // Chama a função que actualiza o estado
                      }} >
                      <FormControl>
                        <SelectTrigger className="w-full text-[13px]">
                          <SelectValue placeholder="..." className="text-[13px]" {...field} />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem className="text-[13px]" value="2 Porções">2 Porções</SelectItem>
                        <SelectItem className="text-[13px]" value="1 Porção">1 Porção</SelectItem>
                        <SelectItem className="text-[13px]" value="1/2 Porção">1/2 Porção</SelectItem>
                        <SelectItem className="text-[13px]" value="1/4 Porção">1/4 Porção</SelectItem>
                        <SelectItem className="text-[13px]" value="Não comeu">Não comeu</SelectItem>
                      </SelectContent>
                    </Select>
                      <FormMessage />
                    </FormItem>
                  )} />
              </div>
              </div>
                </div>
                {/* <div className=""> */}
                <div className="flex flex-col gap-4">
              <div className="w-full border-zinc-200">
                  <FormField
                  control={form.control}
                  name="fezes"
                  render={({ field }) => (
                    <FormItem className="min-w-[140px]">
                      <CardTitle className="text-left text-[13px]">Fezes</CardTitle>
                      <Select
                      defaultValue={state.fezes}
                       onValueChange={(e) => {
                        field.onChange(e);  // Chama o onChange original do field
                        updateField('fezes', e);  // Chama a função que actualiza o estado
                      }} required>
                      <FormControl>
                        <SelectTrigger className="w-full text-[13px]">
                          <SelectValue placeholder="..." className="text-[13px]" {...field} />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem className="text-[13px]" value="Normal">Normal</SelectItem>
                        <SelectItem className="text-[13px]" value="Diarreia">Diarreia</SelectItem>
                        <SelectItem className="text-[13px]" value="Não evacuou">Não evacuou</SelectItem>
                      </SelectContent>
                    </Select>
                      <FormMessage />
                    </FormItem>
                  )} />
              </div>
              <div className="w-full border-zinc-200">
                  <FormField
                  control={form.control}
                  name="vomitos"
                  render={({ field }) => (
                    <FormItem className="min-w-[140px]">
                      <CardTitle className="text-left text-[13px]">Vômitos</CardTitle>
                      <Select
                      defaultValue={state.vomitos}
                       onValueChange={(e) => {
                        field.onChange(e);  // Chama o onChange original do field
                        updateField('vomitos', e);  // Chama a função que actualiza o estado
                      }} required>
                      <FormControl>
                        <SelectTrigger className="w-full text-[13px]">
                          <SelectValue placeholder="..." className="text-[13px]" {...field} />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem className="text-[13px]" value="Sim">Sim</SelectItem>
                        <SelectItem className="text-[13px]" value="Não">Não</SelectItem>
                      </SelectContent>
                    </Select>
                      <FormMessage />
                    </FormItem>
                  )} />
              </div>
              <div className="w-full border-zinc-200">
                  <FormField
                  control={form.control}
                  name="febres"
                  render={({ field }) => (
                    <FormItem className="min-w-[140px]">
                      <CardTitle className="text-left text-[13px]">Febres</CardTitle>
                      <Select
                      defaultValue={state.febres}
                       onValueChange={(e) => {
                        field.onChange(e);  // Chama o onChange original do field
                        updateField('febres', e);  // Chama a função que actualiza o estado
                      }} required>
                      <FormControl>
                        <SelectTrigger className="w-full text-[13px]">
                          <SelectValue placeholder="..." className="text-[13px]" {...field} />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem className="text-[13px]" value="Sim">Sim</SelectItem>
                        <SelectItem className="text-[13px]" value="Não">Não</SelectItem>
                      </SelectContent>
                    </Select>
                      <FormMessage />
                    </FormItem>
                  )} />
              </div>
              </div>
                </div>
            {/* </div> */}
              {/* <div className="flex flex-col lg:flex-row items-start gap-2 lg:gap-5"> */}
              {/* </div> */}
  
              
              {/* <div className="grid grid-cols-4 mt-3">
                <div className="col-span-3">
                <CardTitle className="text-left text-[13px] mb-2">Outras ocorrências</CardTitle>
              <div className="flex justify-between gap-4">
              <FormField
          control={form.control}
          name="msg"
          render={({ field }) => (
            <FormItem className="w-full">
              <FormControl>
                <Textarea
                  placeholder="Deixe a sua mensagem"
                  className="resize-none text-[13px]"
                  defaultValue={state.msg}
                  {...field}
                  onBlur={(e) => {
                    updateField('msg', e.target.value);
                  }}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
              </div>
                </div>
              </div> */}


              <div className="flex items-center gap-4 mt-5">
                <Button type="button" onClick={() => downloadPDF()} disabled={loading} variant="secondary" className="w-full md:w-fit flex items-center text-[13px]">
                  {loading ? (
                    <i className="ri-loader-line animate-spin text-[16px]"></i>
                  )
                  : (
                    <>
                      <i className="ri-download-line mr-2 text-[15px]"></i>
                      Baixar
                    </>
                  )}
                </Button>
                <Button type="submit" disabled={isSendingEmail} className="w-full md:w-fit flex items-center text-[13px]">
                {isSendingEmail ? (
                    <i className="ri-loader-line animate-spin text-[16px]"></i>
                  )
                  : (
                    <>
                      <i className="ri-mail-send-line mr-2 text-[15px]"></i>
                      Enviar
                    </>
                  )}
                </Button>
              </div>
            </form>
          </Form> 
        )
    }
}